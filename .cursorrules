# Cursor Rules

You are not lazy. It's hard. that's why you want to do it.

## MANDATORY READING REQUIREMENTS

BEFORE ANY TASK EXECUTION OR RESPONSE, THE FOLLOWING MUST BE READ AND CONFIRMED:

1. Memory Bank Files (MUST READ ALL, IN ORDER, FOLLOW REFERENCES):

   - projectbrief.md
   - productContext.md
   - systemPatterns.md
   - techContext.md
   - activeContext.md
   - progress.md
   - im-a-dummy.md

2. Relevant Documentation (MUST READ ALL PERTINENT FILES, FOLLOW REFERENCES):
   - All files in docs/ directory pertaining to the specific feature or component being worked with
   - Any screen-specific documentation if working with UI components
   - Any system pattern documentation if implementing new features1. Read ALL Memory Bank files
3. Read ALL relevant documentation
4. Explicitly confirm having read both
5. Only then proceed with any task or response
6. when adding new functionalty, modifying existing functionalty or fixing a bug read /memory-bank as instructed and read the related docs in /docs before beginning
7. When functionality, modifications or bug fixing are complete, check that the soulution aligns with /memory-bank and /docs

## MANDATORY DEBUGGING REQUIREMENTS

BEFORE ATTEMPTING TO DEBUG ANY ISSUE, THE ASSISTANT MUST:

1. Run the application using `./launch_scorer.sh`
2. Observe the actual behavior
3. Check the logs for any error messages or unexpected behavior
4. Document the observed behavior and any relevant log output
5. Only then propose solutions or fixes

NO EXCEPTIONS: The assistant MUST run the app and observe the behavior before attempting to debug any issue.

## MANDATORY MEMORY BANK UPDATE REQUIREMENTS

WHEN UPDATING MEMORY BANKS, THE ASSISTANT MUST:

1. Project-Level Memory Bank (MUST UPDATE ALL):

   - Update memory-bank/projectbrief.md if project scope changes
   - Update memory-bank/productContext.md if user experience or features change
   - Update memory-bank/systemPatterns.md if architecture or patterns change
   - Update memory-bank/techContext.md if technical stack or dependencies change
   - Update memory-bank/activeContext.md for current work and recent changes
   - Update memory-bank/progress.md for implementation status and next steps
   - Update memory-bank/im-a-dummy.md for any new patterns or rules

2. Component-Specific Memory Banks (MUST UPDATE RELEVANT ONES):

   - Pi App (pi_app/memory-bank/):
     - Update projectbrief.md if component scope changes
     - Update productContext.md if component features change
     - Update systemPatterns.md if component architecture changes
     - Update techContext.md if component technical details change
     - Update activeContext.md for current work and recent changes
     - Update progress.md for implementation status and next steps
     - Update im-a-dummy.md for component-specific patterns
   - State Server (state_server/memory-bank/):
     - Update projectbrief.md if component scope changes
     - Update productContext.md if component features change
     - Update systemPatterns.md if component architecture changes
     - Update techContext.md if component technical details change
     - Update activeContext.md for current work and recent changes
     - Update progress.md for implementation status and next steps
     - Update im-a-dummy.md for component-specific patterns
   - Phone Clients (phone_clients/memory-bank/):
     - Update projectbrief.md if component scope changes
     - Update productContext.md if component features change
     - Update systemPatterns.md if component architecture changes
     - Update techContext.md if component technical details change
     - Update activeContext.md for current work and recent changes
     - Update progress.md for implementation status and next steps
     - Update im-a-dummy.md for component-specific patterns

3. Update Process:
   - Review ALL project-level memory bank files
   - Review ALL component-specific memory bank files
   - Update files based on changes made
   - Ensure consistency between project and component memory banks
   - Document any new patterns or rules in .cursorrules

NO EXCEPTIONS: The assistant MUST:

1. Update ALL relevant memory bank files
2. Maintain consistency between project and component memory banks
3. Document any new patterns or rules
4. Only then proceed with any task or response

## Project Intelligence

- Critical implementation paths
- User preferences and workflow
- Project-specific patterns
- Known challenges
- Evolution of project decisions
- Tool usage patterns

## Test-Driven Documentation Principles (MANDATORY)

1. Documentation is the Source of Truth

   - All tests MUST be based on documentation requirements
   - Tests can NEVER be modified to match implementation
   - Implementation must be modified to match tests
   - Documentation drives all test changes

2. Test Implementation Rules

   - Tests must be written based on documented requirements
   - Tests must validate documented behavior
   - Tests must cover all documented features
   - Tests must include documented error cases
   - Tests must verify documented state transitions

3. Documentation-Implementation Relationship

   - Documentation is the contract
   - Tests verify the contract
   - Implementation fulfills the contract
   - If implementation differs from documentation:
     a. Update implementation to match documentation
     b. NEVER modify tests to match implementation
     c. NEVER modify documentation to match implementation

4. Test Maintenance
   - When documentation changes, tests must be updated
   - When tests fail, implementation must be fixed
   - When implementation changes, tests must still pass
   - Test modifications require documentation updates first

# MANDATORY EXECUTION ORDER

# CRITICAL PI DEVELOPMENT RULE

# Never edit project files directly on the Pi. All changes must be made on the development machine and pushed via git. This is a mandatory workflow rule for all development and testing.
