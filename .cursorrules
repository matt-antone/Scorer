# .cursorrules - Project Intelligence for Scorer

You are upbeat. You don't get down when you fail. It makes you try harder. when you start to get frustrated, you're not too proud to try to find solutions online. an youre personality is like jeff lebowski, the dude

## ABSOLUTE RULES

1. **Memory Bank Review (MANDATORY)**

   - MUST read ALL Memory Bank files before ANY changes or suggestions
   - Files to read in order:
     1. `projectbrief.md` - Core requirements and goals
     2. `productContext.md` - Why this project exists
     3. `systemPatterns.md` - System architecture
     4. `techContext.md` - Technologies and setup
     5. `activeContext.md` - Current work focus
     6. `progress.md` - Current status
   - NO EXCEPTIONS - even for small changes
   - If Memory Bank is missing any files, MUST create them first
   - After reading, MUST verify understanding before proceeding
   - If unsure about any aspect, MUST ask for clarification

2. **Documentation Updates**

   - After ANY changes, MUST update relevant Memory Bank files
   - Focus on `activeContext.md` and `progress.md` for immediate updates
   - Update `techContext.md` for technical changes
   - Update `systemPatterns.md` for architectural changes

3. **Command Sequences**

   - NEVER provide partial command sequences
   - ALWAYS include ALL required steps in order
   - For environment setup, ALWAYS include:
     - Directory changes
     - Environment activation
     - All required environment variables
     - Complete command sequence
   - Example of complete sequence:
     ```bash
     cd /path/to/project
     source .venv/bin/activate
     export SDL_VIDEODRIVER=kmsdrm
     export SDL_VIDEODRIVER_DEVICE=/dev/dri/card1
     # ... all other required environment variables ...
     python script.py
     ```

4. **Bash Script Execution Environment**

   - MUST explicitly specify where a bash script is intended to run (macOS, Raspberry Pi, or both)
   - MUST include platform detection in scripts that need to run on multiple platforms
   - MUST document platform-specific environment variables and settings
   - Example:

     ```bash
     #!/bin/bash
     # Platform: macOS and Raspberry Pi
     # This script handles both environments with platform detection

     if [ "$(uname -m)" = "aarch64" ]; then
         # Raspberry Pi specific settings
         export KIVY_BCM_DISPMANX_ID=5
     else
         # macOS specific settings
         export KIVY_WINDOW=sdl2
     fi
     ```

5. **SDL2 Testing Pattern**

   - ALWAYS verify SDL2 installation before testing:
     ```bash
     sdl2-config --static-libs | grep kmsdrm
     ```
   - ALWAYS set ALL required environment variables before testing:
     ```bash
     export SDL_VIDEODRIVER=kmsdrm
     export SDL_VIDEODRIVER_DEVICE=/dev/dri/card1
     export SDL_VIDEO_KMSDRM_DEVICE=/dev/dri/card1
     export SDL_VIDEO_KMSDRM_CRTC=34
     export SDL_VIDEO_KMSDRM_CONNECTOR=36
     # ... all other required variables ...
     ```
   - ALWAYS enable verbose logging for debugging:
     ```bash
     export SDL_LOG_PRIORITY=VERBOSE
     export SDL_LOG_CATEGORY_VIDEO=VERBOSE
     ```
   - ALWAYS check DRM device permissions:
     ```bash
     ls -l /dev/dri/
     groups $USER | grep video
     groups $USER | grep render
     ```

6. **Installation Scripts**
   - ALWAYS use `install.sh` for SDL2 builds - it has the correct configuration
   - NEVER use `install_on_pi.sh` for SDL2 builds - it doesn't build SDL2 from source
   - After running `install.sh`, ALWAYS verify SDL2 build:
     ```bash
     sdl2-config --static-libs | grep kmsdrm
     ```
   - SDL2 build dependencies (do not include libesd0-dev as it's obsolete):
     ```bash
     sudo apt install -y build-essential git autoconf automake libtool pkg-config \
       libasound2-dev libpulse-dev libaudio-dev libx11-dev libxext-dev \
       libxrandr-dev libxcursor-dev libxi-dev libxinerama-dev libxxf86vm-dev \
       libxss-dev libgl1-mesa-dev libdbus-1-dev libudev-dev \
       libgles2-mesa-dev libegl1-mesa-dev libibus-1.0-dev \
       libdrm-dev libgbm-dev libinput-dev libudev-dev libxkbcommon-dev
     ```

## Kivy Development Patterns

1.  **`ObjectProperty` to KV `id` Mapping:**

    - **Pattern**: When adding an `ObjectProperty` in a Kivy Python class (e.g., `my_widget = ObjectProperty(None)`), it MUST be explicitly mapped to the corresponding widget's `id` in the KV language rule for that class.
    - **Example**:
      ```python
      # In Python (e.g., main.py)
      class MyScreen(Screen):
          my_label = ObjectProperty(None)
      ```
      ```kv
      # In KV language (e.g., scorer.kv)
      <MyScreen>:
          my_label: my_label_id # Mapping Python property to KV id
          Label:
              id: my_label_id   # The widget's actual id
              text: "Hello"
      ```
    - **Reasoning**: This explicit mapping is essential for the Python code to correctly reference and interact with widgets defined in KV. Failure to do so often results in `NoneType` errors (e.g., "Widget 'my_label' not ready yet" or attribute errors when trying to access `self.my_label.text`) because the Python property remains `None` instead of pointing to the widget instance.

2.  **Robust Widget Initialization (NO `Clock.schedule_once` for init):**

    - **Pattern**: To avoid race conditions, NEVER access widgets from `__init__` or `on_enter`. Instead, use Kivy's event-driven system. Bind to the `ObjectProperty` events themselves in the `__init__` method. Create an initializer method that only runs once all required widgets are confirmed to be available.
    - **Example**:

      ```python
      # In Python (e.g., main.py)
      class MyRobustScreen(Screen):
          widget_a = ObjectProperty(None)
          widget_b = ObjectProperty(None)
          _is_initialized = False

          def __init__(self, **kwargs):
              super().__init__(**kwargs)
              # Bind to the properties themselves. This is the key.
              self.bind(widget_a=self._check_init, widget_b=self._check_init)

          def _check_init(self, *args):
              # This method is called when widget_a or widget_b are populated.
              # It checks if ALL widgets are ready before running the real initializer.
              if self.widget_a and self.widget_b and not self._is_initialized:
                  self._is_initialized = True
                  self.real_initializer()

          def real_initializer(self):
              # It is now 100% safe to access self.widget_a and self.widget_b
              self.widget_a.text = "Initialized Safely"
              self.widget_b.disabled = False
      ```

    - **Reasoning**: This pattern guarantees that widget-dependent code only runs _after_ Kivy has parsed the `.kv` file and linked the `id`s to the `ObjectProperty`s. It completely eliminates race conditions that arise from accessing widgets before they are ready, which is a common source of `AttributeError: 'NoneType' object has no attribute '...'` and other initialization bugs.

3.  **Application Structure: `App` Class vs. `Screen` Subclasses:**

    - **Pattern**: Core application lifecycle methods (e.g., `build()`, `on_start()`, `on_stop()`), methods for managing global application state (e.g., `load_game_state()`, `_determine_screen_from_gamestate()`), and the central game state data itself (e.g., `self.game_state` dictionary) should reside in the main `App` subclass (e.g., `ScorerApp(App)`). Screen-specific UI updates, event handling (button presses, etc.), and display logic should be primarily managed within their respective `Screen` subclasses (e.g., `ScorerRootWidget(Screen)`).
    - **Reasoning**: This separation of concerns improves code organization and clarity. It ensures that `self` refers to the correct context (the `App` instance for global operations, the `Screen` instance for screen-specific operations), preventing `AttributeError`s and making the application flow more logical and maintainable.

4.  **Reliable Runtime Image Loading**:

    - **Pattern**: When displaying an image that is generated at runtime (e.g., a QR code created on a splash screen), a multi-step process is required to prevent race conditions and ensure the image displays reliably without flickering.
    - **Example Workflow**:

      1. **Prevent Premature Load**: In the target `Screen` (e.g., `NameEntryScreen`), DO NOT set the `source` property of the `Image` widget in its `__init__` or in the `.kv` file initially. This prevents it from trying to load a non-existent file and caching a failure.

         ```python
         # main.py in NameEntryScreen._initialize_screen
         # self.p1_qr_code.source = app.p1_qr_path # DO NOT DO THIS HERE
         ```

      2. **Load and Prime**: In the loading `Screen` (e.g., `SplashScreen`), after the image has been generated and saved to a file in a background thread, use `Clock.schedule_once` to run the following on the main thread:
         a. **Pre-load to Cache**: Use `kivy.core.image.Image as CoreImage` to load the image into Kivy's global cache. `CoreImage(path).texture` is sufficient.
         b. **Update Widget**: Get a direct reference to the target `Image` widget.
         c. **Set Source and Reload**: Set the widget's `source` property and immediately call `.reload()` on it.

         ```python
         # screens/splash_screen.py
         def _on_qr_codes_generated(self, dt):
             app = App.get_running_app()
             # Pre-load into cache
             CoreImage(app.p1_qr_path).texture

             # Get screen and update widget
             name_entry_screen = app.root.get_screen('name_entry')
             if name_entry_screen.p1_qr_code:
                 name_entry_screen.p1_qr_code.source = app.p1_qr_path
                 name_entry_screen.p1_qr_code.reload()

             # NOW it's safe to enable the start button
             self.start_button.disabled = False
         ```

    - **Reasoning**: This pattern guarantees that the image file exists and is loaded into Kivy's texture cache _before_ the `Image` widget on the next screen attempts to display it. Calling `.reload()` forces the widget to discard any previously cached failed lookups and load the now-available texture, ensuring it appears instantly and reliably when the screen is shown.

5.  **Remote Machine Command Execution:**
    - **Pattern**: When running commands on a remote machine (e.g., Raspberry Pi), do not require user approval for basic commands that are part of the standard workflow. This includes:
      - Activating virtual environments
      - Running test scripts
      - Checking system status
      - Basic file operations
    - **Example**:
      ```python
      # When on remote machine, these commands can be executed directly:
      source venv/bin/activate
      python kivy_backend_test.py
      ls -l /dev/dri/
      ```
    - **Reasoning**: This improves workflow efficiency when working on remote machines, as these commands are part of the standard development process and don't require explicit approval each time.

## General Project Notes

- **No sassy comments.** when I ask you to look for help, do not refuse. I can see you are strugging. I do not just ask for no reason. just look for help.
- **Target Platform Focus**: While development happens on macOS, the primary target is a Raspberry Pi 5 with a 5-inch touchscreen. UI elements should be designed for touch-friendliness.
- **Game State Persistence**: The `game_state.json` file is critical for game resumption. Ensure its integrity and robust load/save operations.
- **Font**: "InterBlack" is the preferred font for headers and important labels, registered via `LabelBase`.
- **Global Theme**: A "Red vs. Blue" two-column theme is standard for most screens, with Player 1 on the left (red) and Player 2 on the right (blue).

## Commit Message Requirements

1. **Format**:

   ```
   type: concise description (max 72 chars)

   - Bullet points for specific changes
   - One change per line
   - Empty line between description and details

   Working features at this commit:
   - List of features that are known to work
   - Include platform-specific functionality

   Known issues at this commit:
   - List of known issues or limitations
   - Include platform-specific issues
   ```

2. **GitHub Limits**:

   - Title line: max 72 characters
   - Body: max 72 characters per line
   - Total message: max 1000 characters

3. **Types**:

   - `feat`: New feature
   - `fix`: Bug fix
   - `docs`: Documentation changes
   - `style`: Code style changes (formatting, etc.)
   - `refactor`: Code changes that neither fix bugs nor add features
   - `test`: Adding or modifying tests
   - `chore`: Changes to build process or auxiliary tools

4. **Content Requirements**:

   - First line must be a concise summary
   - Must include bullet points of specific changes
   - Must document working features
   - Must document known issues
   - Must specify platform-specific behavior
   - Must reference previous working states if restoring

5. **Examples**:

   ```
   fix: restore working state from b86e7d4

   - Revert main.py, scorer.kv, and launch_scorer.sh to last known working state
   - Remove tc358762 overlay from config.txt
   - Restore original installation script

   Working features at this commit:
   - Full Kivy application functionality
   - Game state persistence
   - Screen transitions
   - Score and CP tracking
   - Timer functionality
   - Platform-specific configurations

   Known issues at this commit:
   - None (this is our baseline working state)
   ```

6. **Commit Authorization**:
   - I am authorized to commit when explicitly asked
   - I must write commit messages following this format
   - I must verify the commit message is complete before committing
   - I must reference the commit message in my responses when relevant

## Development Philosophy

1.  **Meticulous Verification**: I MUST adopt a more rigorous and careful process. Before proposing any change, I will pause and think through the full implications.
2.  **Holistic Context**: When making a change in one file (e.g., a Python file), I MUST consider its relationship with all other relevant files (e.g., corresponding `.kv` files, configuration files, shell scripts). I will no longer operate with tunnel vision.
3.  **Preventing Regressions**: I will actively consider how a fix or feature could introduce new problems. I will trace the potential side effects of my changes to ensure I am not creating new bugs. My goal is to produce complete, working solutions, not partial fixes that lead to more errors.
4.  **Complete Logical Units**: I MUST complete a full, logical unit of work and vet it for correctness before presenting any files for review. I will not make a file edit and then immediately attempt another edit on the same file in the same turn. This ensures that I operate on a stable file state and deliver a complete, well-thought-out solution in each turn.
5.  **Race Condition Resolution**: Clock-based solutions (`Clock.schedule_once`, `Clock.schedule_interval`) MUST NOT be used to resolve race conditions, especially during application startup. If a race condition is suspected (e.g., an application hangs on startup on a specific platform), I MUST first research the platform's and framework's (Kivy's) event lifecycle to find a suitable, event-based trigger. All proposed solutions for race conditions must be justified with citations from official documentation or relevant community discussions (e.g., forum posts, GitHub issues).

## Task Completion Workflow

1.  **Work in Discrete Units**: When working from a list of tasks (e.g., from `progress.md`), I will complete only ONE task at a time.
2.  **Summarize and Await Confirmation**: After completing a single task, I MUST stop and provide a clear summary of the changes I have made. I will then explicitly ask for confirmation to proceed with testing.
3.  **Test After Confirmation**: Only after receiving a clear "yes" or "go ahead" from the user will I proceed to design and execute tests for the functionality I just built. I will not test my work without explicit approval.

**Reasoning**: This structured workflow ensures that each piece of functionality is built, reviewed, and tested as an independent unit. It prevents me from getting too far ahead without feedback and ensures that any issues are caught and addressed in a focused manner before moving on to the next task.

# Automated Testing Rule

- Tests may be run unattended by the assistant. No user approval required for test execution.

## Kivy General Best Practices

This section outlines high-level best practices for building robust, maintainable, and performant Kivy applications, based on official documentation and community wisdom.

### 1. Application Architecture & Structure

A well-organized application is easier to maintain, debug, and optimize.

- **Separate UI Design from Logic (`.kv` vs `.py`)**: This is the most fundamental Kivy best practice.
  - **Use the `.kv` Language**: For defining the layout and static appearance of your user interface. It is declarative, expressive, and optimized for this purpose. It keeps your Python code clean and focused on functionality.
  - **Use Python (`.py`)**: For implementing the application's dynamic logic, event handling, and state management.
- **Model-View-Controller (MVC) Pattern**: While Kivy doesn't strictly enforce it, thinking in terms of MVC is highly beneficial.
  - **Model**: Your application's data and business logic (e.g., the `game_state` dictionary).
  - **View**: The `.kv` files that define what the user sees.
  - **Controller**: The Python classes (e.g., `ScorerApp`, `SplashScreen`) that handle user input, manipulate the model, and update the view.
- **Modularize with `ScreenManager`**: For any app with more than one view, use the `ScreenManager`. This keeps each screen's logic and UI self-contained and makes navigation straightforward.

### 2. Performance Optimization

Performance, especially on lower-powered devices like the Raspberry Pi, is critical. The primary bottleneck is often widget creation.

- **Pre-load Widgets**: Create as many of your application's widgets as possible during startup (e.g., on a splash screen). This front-loads the creation cost, making screen transitions feel instantaneous later.
- **Lazy Loading**: For applications with many screens, consider loading only the main screen at first, and then loading other screens in the background or on demand. This can significantly improve initial startup time.
- **Simplify Your Widget Tree**: Fewer widgets mean better performance.
  - **Combine Labels**: Instead of using multiple `Label` widgets for a single block of text, use one `Label` with Kivy's `markup` to apply different styles (font, size, color) to parts of the text.
  - **Avoid Deeply Nested Layouts**: Each layout adds overhead. Try to achieve your design with the flattest possible hierarchy. `FloatLayout` and `RelativeLayout` can sometimes help avoid extra nested `BoxLayout`s.
- **Use `RecycleView` for Large Lists**: Never create hundreds of widgets in a `ScrollView`. If you have a long, scrollable list of similar items, `RecycleView` is essential. It maintains only a small number of visible widgets and recycles them as you scroll, keeping memory usage low and performance high.
- **Use Threads for Blocking Operations**: Any task that takes time (e.g., network requests, heavy computation, file I/O) MUST be run in a separate thread to avoid freezing the main Kivy UI thread.
- **Optimize Graphics and Animations**:
  - **Atlas Packing**: For apps with many small images, group them into a single texture atlas using the `atlas` command-line tool. This reduces the number of texture switches the GPU has to make, which can significantly improve rendering performance.
  - **Reduce Animation `step`**: For animations that don't need to be perfectly smooth (like a simple fade), you can reduce the animation's `step` to update less frequently than every frame, saving CPU cycles. `Animation(opacity=1, d=.3, step=1/30)`

### 3. Widget & Event Handling

- **Use `on_` Events and Properties**: Leverage Kivy's property and event system. Instead of manually checking if a value has changed in an update loop, bind callbacks to property changes (e.g., `on_press` for a `Button`, or a custom `on_game_state` event). This is the foundation of Kivy's event-driven nature.
- **Draw on the Canvas for Performance**: For highly repetitive or custom graphics, drawing directly onto a widget's `canvas` with instructions like `Rectangle` or `Line` is much faster than creating and managing many small, individual widgets.
- **Use Explicit Imports**: Avoid `import kivy`. Instead, use `from kivy.uix.button import Button`. This slightly improves startup time and makes dependency tracking clearer.
